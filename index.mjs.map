{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport getOwnPropertyDescriptors from '@stdlib/utils-property-descriptors' ;\nimport getOwnPropertySymbols from '@stdlib/utils-property-symbols' ;\nimport getPrototypeOf from '@stdlib/utils-get-prototype-of' ;\nimport objectKeys from '@stdlib/utils-keys' ;\nimport defineProperty from '@stdlib/utils-define-property' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns an object's inherited property descriptors.\n*\n* ## Notes\n*\n* -   In contrast to the built-in `Object.getOwnPropertyDescriptors()`, this function returns an empty object if provided `undefined` or `null`, rather than throwing an error.\n*\n* @param {*} value - input object\n* @param {PositiveInteger} [level] - inheritance level\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Object} inherited property descriptors\n*\n* @example\n* var desc = inheritedPropertyDescriptors( [] );\n* // returns {...}\n*/\nfunction inheritedPropertyDescriptors( value, level ) { // eslint-disable-line id-length\n\tvar desc;\n\tvar keys;\n\tvar obj;\n\tvar tmp;\n\tvar N;\n\tvar n;\n\tvar i;\n\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isPositiveInteger( level ) ) {\n\t\t\tthrow new TypeError( format( '0kE4I', level ) );\n\t\t}\n\t\tN = level;\n\t} else {\n\t\tN = MAX_SAFE_INTEGER;\n\t}\n\tif ( value === null || value === void 0 ) {\n\t\treturn {};\n\t}\n\t// Get the value's prototype:\n\tobj = getPrototypeOf( value );\n\n\t// Walk the prototype chain collecting all property descriptors...\n\tdesc = {};\n\tn = 1;\n\twhile ( obj && n <= N ) {\n\t\ttmp = getOwnPropertyDescriptors( obj );\n\t\tkeys = objectKeys( tmp );\n\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t// The first encountered property descriptor for a property name always takes precedence...\n\t\t\tif ( !hasOwnProp( desc, keys[ i ] ) ) {\n\t\t\t\t// The following is equivalent to `desc[ keys[i] ] = {...}`, but accounts for the possibility of a \"poisoned\" `Object` prototype (i.e., an `Object.prototype` having a property with a setter which throws).\n\t\t\t\tdefineProperty( desc, keys[ i ], {\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'enumerable': true,\n\t\t\t\t\t'writable': true,\n\t\t\t\t\t'value': tmp[ keys[ i ] ]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tkeys = getOwnPropertySymbols( tmp );\n\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t// The first encountered property descriptor for a symbol property always takes precedence...\n\t\t\tif ( !hasOwnProp( desc, keys[ i ] ) ) {\n\t\t\t\t// The following is equivalent to `desc[ keys[i] ] = {...}`, but accounts for the possibility of a \"poisoned\" `Object` prototype (i.e., an `Object.prototype` having a property with a setter which throws).\n\t\t\t\tdefineProperty( desc, keys[ i ], {\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'enumerable': true,\n\t\t\t\t\t'writable': true,\n\t\t\t\t\t'value': tmp[ keys[ i ] ]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tobj = getPrototypeOf( obj );\n\t\tn += 1;\n\t}\n\treturn desc;\n}\n\n\n// EXPORTS //\n\nexport default inheritedPropertyDescriptors;\n"],"names":["inheritedPropertyDescriptors","value","level","desc","keys","obj","tmp","N","n","i","arguments","length","isPositiveInteger","TypeError","format","MAX_SAFE_INTEGER","getPrototypeOf","getOwnPropertyDescriptors","objectKeys","hasOwnProp","defineProperty","configurable","enumerable","writable","getOwnPropertySymbols"],"mappings":";;i0BAmDA,SAASA,EAA8BC,EAAOC,GAC7C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKC,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAmBV,GACxB,MAAM,IAAIW,UAAWC,EAAQ,QAASZ,IAEvCK,EAAIL,OAEJK,EAAIQ,EAEL,GAAKd,QACJ,MAAO,GAQR,IALAI,EAAMW,EAAgBf,GAGtBE,EAAO,GACPK,EAAI,EACIH,GAAOG,GAAKD,GAAI,CAGvB,IAFAD,EAAMW,EAA2BZ,GACjCD,EAAOc,EAAYZ,GACbG,EAAI,EAAGA,EAAIL,EAAKO,OAAQF,IAEvBU,EAAYhB,EAAMC,EAAMK,KAE7BW,EAAgBjB,EAAMC,EAAMK,GAAK,CAChCY,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZtB,MAASK,EAAKF,EAAMK,MAKvB,IADAL,EAAOoB,EAAuBlB,GACxBG,EAAI,EAAGA,EAAIL,EAAKO,OAAQF,IAEvBU,EAAYhB,EAAMC,EAAMK,KAE7BW,EAAgBjB,EAAMC,EAAMK,GAAK,CAChCY,cAAgB,EAChBC,YAAc,EACdC,UAAY,EACZtB,MAASK,EAAKF,EAAMK,MAIvBJ,EAAMW,EAAgBX,GACtBG,GAAK,EAEN,OAAOL"}